#!/usr/bin/env python
from app import app, db
from flask import request
from flask_restful import Resource, Api
import json
import gzip
import cStringIO
import datetime

from gpsDB import gpsposition, gpsjsondata

class JsonResponse():
	def __init__(self, status, data):
		self.rd = {}
		self.rd['status'] = status
		self.rd['data'] = data
	def toJson(self):
		return json.dumps(self.rd)

class ErrorResponse(JsonResponse):
	def __init__(self, reason):
		t = {}
		t['errmsg'] = reason
		JsonResponse.__init__(self,'error',t)

class GPSDataResponse(JsonResponse):
	def __init__(self, gpsdata):
		t = {}
		t['gpsdata'] = gpsdata
		JsonResponse.__init__(self,'ok',t)
class OKResponse(JsonResponse):
	def __init__(self):
		JsonResponse.__init__(self, 'ok','')

class ClientReciever(Resource):
    def post(self, client_name):
		#TODO!
		client_ip = '127.0.0.1'
		upload_time = datetime.datetime.utcnow()

		if request.content_length is not None and request.content_length > app.config['POST_DATA_MAX_SIZE']:
			print 'Error POST DATA SIZE'
			return ErrorResponse('Content length missing or too large!').toJson()
		try:
			compressedFile = cStringIO.StringIO(request.get_data())
			compressedFile.seek(0)
			decompressedFile = gzip.GzipFile(fileobj=compressedFile, mode='rb')
			for line in decompressedFile:
				line = line.strip()
				try:
					gpsdata = json.loads(line)
					if 'class' not in gpsdata:
						print 'Strange!'
						return 'Error'

					if gpsdata['class'] == 'TPV':
						gpsp = gpsposition(gpsdata, client_name, client_ip, upload_time)
						db.session.add(gpsp)

					gpsraw = gpsjsondata(line, client_name, client_ip, upload_time)
					db.session.add(gpsraw)
					db.session.commit()
				except Exception as e:
					print 'Error parsing GPS data! Data: '+str(e)
					return ErrorResponse('Error parsing data!').toJson()

		except:
			#log
			return ErrorResponse('Error decompressing data!').toJson()

		return OKResponse().toJson()

class GetLatestPosition(Resource):
	def get(self, client_name):
		gpspos = gpsposition.query.filter_by(client_name = client_name).order_by(gpsposition.gps_time.desc()).first()
		temp = {}
		temp['lat']		return GPSDataResponse(gpspos)
